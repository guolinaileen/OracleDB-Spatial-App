/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
import java.sql.*;
import java.util.*;
import oracle.sdoapi.OraSpatialManager;
import oracle.sdoapi.geom.*;
import oracle.sdoapi.adapter.*;
import oracle.sdoapi.sref.*;
import oracle.sql.STRUCT;
import java.awt.*;
import java.awt.event.ItemEvent;
/**
 *
 * @author guolin
 */
public class hw2 extends javax.swing.JFrame {
    Connection mainConnection=null; 
    Statement mainStatement=null; 
    ResultSet mainResultSet = null;
    int querynum=0;
    String queryString="";
    /**
     * Creates new form hw2
     */
    public hw2() {
        ConnectToDB();
        initComponents();
    }
   public void ConnectToDB()
   {
       try
       {
        DriverManager.registerDriver(new oracle.jdbc.OracleDriver());
	String URL = "jdbc:oracle:thin:@localhost:1521:csci585";
	String userName = "temp585";
	String password = "temp585";
	mainConnection = DriverManager.getConnection(URL, userName, password);
	mainStatement = mainConnection.createStatement();
       }
       catch(Exception e)
       {
         System.out.println( "Error while connecting to DB: "+ e.toString() );
       }
   }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Name: Lin Guo;USCID: 5735679970");

        jPanel1.setAlignmentX(0.0F);
        jPanel1.setAlignmentY(0.0F);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("map.jpg"))); // NOI18N
        jLabel1.setAlignmentY(0.0F);
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel1MouseEntered(evt);
            }
        });
        jLabel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jLabel1MouseMoved(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1)
        );

        jLabel2.setText("Active Feature Type");

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        jCheckBox1.setLabel("Building");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jCheckBox2.setLabel("Access Point");

        jCheckBox3.setLabel("People");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jCheckBox1)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jCheckBox2)
                .addGap(32, 32, 32)
                .addComponent(jCheckBox3))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox2)
                    .addComponent(jCheckBox3)))
        );

        jLabel3.setText("Query");

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        jRadioButton1.setText("Whole Region");
        jRadioButton1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jRadioButton1StateChanged(evt);
            }
        });
        jRadioButton1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButton1ItemStateChanged(evt);
            }
        });

        jRadioButton2.setText("Range Query");
        jRadioButton2.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jRadioButton2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jRadioButton2StateChanged(evt);
            }
        });
        jRadioButton2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButton2ItemStateChanged(evt);
            }
        });

        jRadioButton3.setText("Point Query");
        jRadioButton3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButton3ItemStateChanged(evt);
            }
        });

        jRadioButton4.setText("Find AP Covered People");
        jRadioButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jRadioButton4MouseClicked(evt);
            }
        });
        jRadioButton4.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButton4ItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton3)
                    .addComponent(jRadioButton4))
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jRadioButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jRadioButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jRadioButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton2)
                .addGap(7, 7, 7)
                .addComponent(jRadioButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jRadioButton4))
        );

        javax.swing.ButtonGroup group=new javax.swing.ButtonGroup();
        group.add(jRadioButton1);
        group.add(jRadioButton2);
        group.add(jRadioButton3);
        group.add(jRadioButton4);

        jButton1.setText("Submit    Query");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jButton1MouseMoved(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setText("Clear Text Area");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jButton3.setText("Clear GUI of MAP");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 8, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addGap(73, 73, 73)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(61, 61, 61))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jLabel1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseEntered

        // TODO add your handling code here:       
    }//GEN-LAST:event_jLabel1MouseEntered

    private void jButton1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseMoved
       // TODO add your handling code here:
    }//GEN-LAST:event_jButton1MouseMoved

    private void jLabel1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseMoved
        // TODO add your handling code here:
         int x=evt.getX();
         int y=evt.getY();
        jLabel4.setText("x:"+x+","+"y:"+y);
    }//GEN-LAST:event_jLabel1MouseMoved

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        Graphics g=jLabel1.getGraphics();
     if(jRadioButton1.isSelected())
     {
       if( jCheckBox1.isSelected())
       {      
          g.setColor(Color.YELLOW);
          String id; 
           try
           {
           mainResultSet= mainStatement.executeQuery("select b.building_ID, b.shape.sdo_ordinates from building b");
           String query="select b.building_ID, b.shape.sdo_ordinates from building b";
           querynum++;
           query="Query "+querynum+":"+query+"\n";
           queryString+=query;
           jTextArea1.setText(queryString);
           while(mainResultSet.next())
           {
               id=mainResultSet.getString(1);
               oracle.sql.ARRAY point=(oracle.sql.ARRAY)mainResultSet.getObject(2);
               ResultSet result=point.getResultSet();
               int []cord=new int[100];
               int num=0;
               while(result.next())
               {
                  cord[num]= result.getInt(2);
                  num++;           
               }
               for(int i=0; i<num-1; i+=2)
               {
                   if(i<=num-4)
                   {
                   g.drawLine(cord[i], cord[i+1], cord[i+2], cord[i+3]);
                   }
                   if(i==num-2)
                   {
                   g.drawLine(cord[i], cord[i+1], cord[0], cord[1]);   
                   }
               }
           }
           }
           catch(Exception e)
           {
             System.out.println(  e.toString() );
           }
       }
       if(jCheckBox3.isSelected())
       {
            g.setColor(Color.GREEN);
           try
           {
           String query="select p.people_id,p.shape.sdo_point.x, p.shape.sdo_point.y from people p";
           querynum++;
           query="Query "+querynum+":"+query+"\n";
           queryString+=query;
           
           jTextArea1.setText(queryString);
           
           mainResultSet= mainStatement.executeQuery("select p.people_id,p.shape.sdo_point.x, p.shape.sdo_point.y from people p");
           while(mainResultSet.next())
           {             
               String id=mainResultSet.getString(1);
               int x=mainResultSet.getInt(2); 
               int y=mainResultSet.getInt(3); 
               g.fillRect(x-5, y-5, 10, 10); 
           }
           }
           catch(Exception e)
           {
             System.out.println(  e.toString() );
           }
       }
       if(jCheckBox2.isSelected())
       {
           g.setColor(Color.red);
            try
           {
           String query="select p.ap_id,p.ap_radius, p.shape.sdo_point.x, p.shape.sdo_point.y from ap p";
           querynum++;
           query="Query "+querynum+":"+query+"\n";
           queryString+=query;
           jTextArea1.setText(queryString);
           
           mainResultSet= mainStatement.executeQuery("select p.ap_id,p.ap_radius, p.shape.sdo_point.x, p.shape.sdo_point.y from ap p");
           while(mainResultSet.next())
           {
               String id=mainResultSet.getString(1);
               int rad=mainResultSet.getInt(2);   
               int x=mainResultSet.getInt(3); 
               int y=mainResultSet.getInt(4); 
               g.fillRect(x-7, y-7, 15, 15); 
               g.drawOval(x-rad, y-rad, 2*rad, 2*rad);
           }
           }
           catch(Exception e)
           {
             System.out.println(  e.toString() );
           }
       }
     }
     else  if(jRadioButton2.isSelected())
     {
      g.setColor(Color.red);
      String result=new String();
      for(int i=0; i<=counter-1; i++)
      {
          String s1=String.valueOf(xCord[i]);
          String s2=String.valueOf(yCord[i]);     
          if(i==counter-1) 
          {
           result+=s1+","+s2+",";
           result+=String.valueOf(xCord[0])+","+String.valueOf(yCord[0]);
          }else
          {
           result+=s1+","+s2+","; 
          }
      }
      if(jCheckBox1.isSelected())
      {
      try{
          String query="SELECT t.building_ID, t.shape.sdo_ordinates FROM building t WHERE SDO_RELATE(t.shape, mdsys.sdo_geometry(2003,NULL,NULL, mdsys.sdo_elem_info_array(1,1003,1),mdsys.sdo_ordinate_array("+result+")),'mask=INSIDE querytype=WINDOW') = 'TRUE' Union ALL SELECT t.building_ID, t.shape.sdo_ordinates FROM building t WHERE SDO_RELATE(t.shape, mdsys.sdo_geometry(2003,NULL,NULL, mdsys.sdo_elem_info_array(1,1003,1),mdsys.sdo_ordinate_array("+result+")),'mask=ANYINTERACT querytype=WINDOW') = 'TRUE'";
          mainResultSet= mainStatement.executeQuery("SELECT t.building_ID, t.shape.sdo_ordinates FROM building t WHERE SDO_RELATE(t.shape, mdsys.sdo_geometry(2003,NULL,NULL, mdsys.sdo_elem_info_array(1,1003,1),mdsys.sdo_ordinate_array("+result+")),'mask=INSIDE querytype=WINDOW') = 'TRUE' Union ALL SELECT t.building_ID, t.shape.sdo_ordinates FROM building t WHERE SDO_RELATE(t.shape, mdsys.sdo_geometry(2003,NULL,NULL, mdsys.sdo_elem_info_array(1,1003,1),mdsys.sdo_ordinate_array("+result+")),'mask=ANYINTERACT  querytype=WINDOW') = 'TRUE'");
           querynum++;
           query="Query "+querynum+":"+query+"\n";
           queryString+=query;
           jTextArea1.setText(queryString);
        int j=0; 
        while(mainResultSet.next())
           {   j++;
               String s=mainResultSet.getString(1);
               
               oracle.sql.ARRAY point=(oracle.sql.ARRAY)mainResultSet.getObject(2);
               ResultSet Queryresult=point.getResultSet();
               int []cord=new int[100];
               int num=0;
               
               while(Queryresult.next())
               {
                  cord[num]= Queryresult.getInt(2);         
                  num++;           
               }
               
                 g.setColor(Color.yellow);
               for(int i=0; i<num-1; i+=2)
               {
                   if(i<=num-4)
                   {
                   g.drawLine(cord[i], cord[i+1], cord[i+2], cord[i+3]);
                   }
                   else
                   if(i==num-2)
                   {
                   g.drawLine(cord[i], cord[i+1], cord[0], cord[1]);   
                   }
               }
           }
      }
      catch(Exception e)
      {
          System.out.println(  e.toString() );
      }
      }
      if(jCheckBox2.isSelected())
      {
          String querytemp="SELECT t.ap_ID, t.shape.sdo_point.x, t.shape.sdo_point.y FROM ap t WHERE SDO_RELATE(t.shape, mdsys.sdo_geometry(2003,NULL,NULL, mdsys.sdo_elem_info_array(1,1003,1),mdsys.sdo_ordinate_array("+result+")),'mask=INSIDE querytype=WINDOW') = 'TRUE' Union ALL SELECT b.ap_ID, b.shape.sdo_point.x, b.shape.sdo_point.y FROM ap b WHERE SDO_RELATE(b.shape, mdsys.sdo_geometry(2003,NULL,NULL, mdsys.sdo_elem_info_array(1,1003,1),mdsys.sdo_ordinate_array("+result+")),'mask=ANYINTERACT querytype=WINDOW') = 'TRUE'";
          g.setColor(Color.red);
           querynum++;
          String query="Query "+querynum+":"+querytemp+"\n";
           queryString+=query;
           jTextArea1.setText(queryString);
          try{
               mainResultSet= mainStatement.executeQuery(querytemp);
     //      mainResultSet= mainStatement.executeQuery("SELECT t.ap_ID, t.shape.sdo_point.x, t.shape.sdo_point.y FROM ap t WHERE SDO_RELATE(t.shape, mdsys.sdo_geometry(2003,NULL,NULL, mdsys.sdo_elem_info_array(1,1003,1),mdsys.sdo_ordinate_array("+result+")),'mask=INSIDE querytype=WINDOW') = 'TRUE' Union ALL SELECT b.ap_ID, b.shape.sdo_point.x, b.shape.sdo_point.y FROM ap b WHERE SDO_RELATE(b.shape, mdsys.sdo_geometry(2003,NULL,NULL, mdsys.sdo_elem_info_array(1,1003,1),mdsys.sdo_ordinate_array("+result+")),'mask=ANYINTERACT querytype=WINDOW') = 'TRUE'");
           while(mainResultSet.next())
           {      
               int x=mainResultSet.getInt(2); 
               int y=mainResultSet.getInt(3); 
               g.fillRect(x-7, y-7, 15, 15); 
           }
          }
          catch(Exception e)
          {
          System.out.println(  e.toString() );
          }
      }
      if(jCheckBox3.isSelected())
      {
          g.setColor(Color.GREEN);
          String querytemp="SELECT t.people_ID, t.shape.sdo_point.x, t.shape.sdo_point.y FROM people t WHERE SDO_RELATE(t.shape, mdsys.sdo_geometry(2003,NULL,NULL, mdsys.sdo_elem_info_array(1,1003,1),mdsys.sdo_ordinate_array("+result+")),'mask=INSIDE querytype=WINDOW') = 'TRUE' Union ALL SELECT b.people_ID, b.shape.sdo_point.x, b.shape.sdo_point.y FROM people b WHERE SDO_RELATE(b.shape, mdsys.sdo_geometry(2003,NULL,NULL, mdsys.sdo_elem_info_array(1,1003,1),mdsys.sdo_ordinate_array("+result+")),'mask=ANYINTERACT querytype=WINDOW') = 'TRUE'";
           
          querynum++;
          String query="Query "+querynum+":"+querytemp+"\n";
          queryString+=query;
          jTextArea1.setText(queryString);
          
          try{
          mainResultSet= mainStatement.executeQuery(querytemp);
            while(mainResultSet.next())
           {      
               int x=mainResultSet.getInt(2); 
               int y=mainResultSet.getInt(3); 
               g.fillRect(x-5, y-5, 10, 10); 
           }
          }
          catch(Exception e)
          {
          System.out.println(  e.toString() );
          }
      }
      }
     
     else if(jRadioButton3.isSelected())
     {
          String s1=String.valueOf(xxx);
          String s2=String.valueOf(yyy);     
          String result=s1+","+s2;
          String nearstbuilding="";
          String nearstap="";
          String nearstpeople="";
          
         if(jCheckBox1.isSelected())
         {           
           try{ 
           g.setColor(Color.yellow);
           String query1temp1="SELECT t.building_ID, t.shape.sdo_ordinates FROM building t WHERE SDO_NN(t.shape, mdsys.sdo_geometry(2001,NULL, mdsys.sdo_point_type("+result+",NULL),NULL,NULL),'distance=70') = 'TRUE' ";
           
           querynum++;
           String query1nearst="Query "+querynum+":"+query1temp1+"\n";
           queryString+=query1nearst;
           jTextArea1.setText(queryString); 
           
           mainResultSet= mainStatement.executeQuery(query1temp1);
           while(mainResultSet.next())
           {
               nearstbuilding=mainResultSet.getString(1);
               oracle.sql.ARRAY point=(oracle.sql.ARRAY)mainResultSet.getObject(2);
               ResultSet Queryresult=point.getResultSet();
               int []cord=new int[100];
               int num=0;           
               while(Queryresult.next())
               {
                  cord[num]= Queryresult.getInt(2);         
                  num++;           
               }
                 
               for(int i=0; i<num-1; i+=2)
               {
                   if(i<=num-4)
                   {
                   g.drawLine(cord[i], cord[i+1], cord[i+2], cord[i+3]);
                   }
                   if(i==num-2)
                   {
                   g.drawLine(cord[i], cord[i+1], cord[0], cord[1]);   
                   }
               }
           }
                 
           String query1temp="SELECT t.building_ID, t.shape.sdo_ordinates FROM building t WHERE SDO_within_distance(t.shape, mdsys.sdo_geometry(2001,NULL, mdsys.sdo_point_type("+result+",NULL),NULL,NULL),'distance=70') = 'TRUE' ";
   
           querynum++;
           String query1="Query "+querynum+":"+query1temp+"\n";
           queryString+=query1;
           jTextArea1.setText(queryString); 
           
           mainResultSet= mainStatement.executeQuery(query1temp);
        while(mainResultSet.next())
           {
               g.setColor(Color.green);
               String temp=mainResultSet.getString(1);
               if(!temp.equals(nearstbuilding)){
               oracle.sql.ARRAY point=(oracle.sql.ARRAY)mainResultSet.getObject(2);
               ResultSet Queryresult=point.getResultSet();
               int []cord=new int[100];
               int num=0;           
               while(Queryresult.next())
               {
                  cord[num]= Queryresult.getInt(2);         
                  num++;           
               }
                 
               for(int i=0; i<num-1; i+=2)
               {
                   if(i<=num-4)
                   {
                   g.drawLine(cord[i], cord[i+1], cord[i+2], cord[i+3]);
                   }
                   if(i==num-2)
                   {
                   g.drawLine(cord[i], cord[i+1], cord[0], cord[1]);   
                   }
               }
               }
           }
      }
      catch(Exception e)
      {
          System.out.println(  e.toString() );
      } 
     }
       
         if(jCheckBox2.isSelected())
         {        
           String query2temp1="SELECT t.ap_ID, t.shape.sdo_point.x, t.shape.sdo_point.y FROM ap t  WHERE SDO_NN(t.shape, mdsys.sdo_geometry(2001,NULL, mdsys.sdo_point_type("+result+",NULL),NULL,NULL),'distance=70') = 'TRUE' ";
           querynum++;
           String query2nearst="Query "+querynum+":"+query2temp1+"\n";
           queryString+=query2nearst;
           jTextArea1.setText(queryString); 
           try{
          mainResultSet= mainStatement.executeQuery(query2temp1);
            while(mainResultSet.next())
           {   
               g.setColor(Color.yellow);  
               nearstap=mainResultSet.getString(1);
               int x=mainResultSet.getInt(2); 
               int y=mainResultSet.getInt(3); 
               g.fillRect(x-7, y-7, 15, 15);
           }
          }
          catch(Exception e)
          {
          System.out.println(  e.toString() );
          }
        
           
           String query2temp="SELECT t.ap_ID, t.shape.sdo_point.x, t.shape.sdo_point.y FROM ap t  WHERE SDO_within_distance(t.shape, mdsys.sdo_geometry(2001,NULL, mdsys.sdo_point_type("+result+",NULL),NULL,NULL),'distance=70') = 'TRUE' ";       
              
           querynum++;
           String query2="Query "+querynum+":"+query2temp+"\n";
           queryString+=query2;
           jTextArea1.setText(queryString);
             
           try{
          mainResultSet= mainStatement.executeQuery(query2temp);
            while(mainResultSet.next())
           {  
               g.setColor(Color.GREEN);
               String temp=mainResultSet.getString(1);
               if(!nearstap.equals(temp))
               {
                
               int x=mainResultSet.getInt(2); 
               int y=mainResultSet.getInt(3); 
               g.fillRect(x-7, y-7, 15, 15); 
                }
           }
          }
          catch(Exception e)
          {
          System.out.println(  e.toString() );
          }
            }
        
         if(jCheckBox3.isSelected())
         {
           
           String query3temp1="SELECT t.people_ID, t.shape.sdo_point.x, t.shape.sdo_point.y FROM people t WHERE SDO_NN(t.shape, mdsys.sdo_geometry(2001,NULL, mdsys.sdo_point_type("+result+",NULL),NULL,NULL),'distance=70') = 'TRUE' ";
           querynum++;
           String query3nearst="Query "+querynum+":"+query3temp1+"\n";
           queryString+=query3nearst;
           jTextArea1.setText(queryString);
           
           try{
          mainResultSet= mainStatement.executeQuery(query3temp1);
            while(mainResultSet.next())
           {   
               g.setColor(Color.yellow);
               nearstpeople=mainResultSet.getString(1);
               int x=mainResultSet.getInt(2); 
               int y=mainResultSet.getInt(3); 
               g.fillRect(x-5, y-5, 10, 10); 
           }
          }
          catch(Exception e)
          {
          System.out.println(  e.toString() );
          }
           
           
           
           String query3temp="SELECT t.people_ID, t.shape.sdo_point.x, t.shape.sdo_point.y FROM people t WHERE SDO_within_distance(t.shape, mdsys.sdo_geometry(2001,NULL, mdsys.sdo_point_type("+result+",NULL),NULL,NULL),'distance=70') = 'TRUE' ";
           querynum++;
           String query3="Query "+querynum+":"+query3temp+"\n";
           queryString+=query3;
           jTextArea1.setText(queryString);
           
           try{
          mainResultSet= mainStatement.executeQuery(query3temp);
            while(mainResultSet.next())
           {   g.setColor(Color.GREEN);
               String temp=mainResultSet.getString(1);
               if(!temp.equals(nearstpeople))
               {
               int x=mainResultSet.getInt(2); 
               int y=mainResultSet.getInt(3); 
               g.fillRect(x-5, y-5, 10, 10); 
               }
           }
          }
          catch(Exception e)
          {
          System.out.println(  e.toString() );
          }
                 }  
     }
     else if(jRadioButton4.isSelected())
     {   
         int rad2=rad+5; 
         int rad3=rad+10;
         String id[]=new String[100];
         String id2[]=new String[100];
         int number=0;
         int number2=0;
         String query1temp="SELECT t.people_ID, t.shape.sdo_point.x, t.shape.sdo_point.y FROM people t  WHERE SDO_within_distance(t.shape, mdsys.sdo_geometry(2001,NULL, mdsys.sdo_point_type("+xxx+","+yyy+",NULL),NULL,NULL),'distance="+rad+"') = 'TRUE'"; 
           
         querynum++;
        String query1="Query "+querynum+":"+query1temp+"\n";
         queryString+=query1;
         jTextArea1.setText(queryString);
           
         try{
          mainResultSet= mainStatement.executeQuery(query1temp);
            while(mainResultSet.next())
           {      
               id[number++]=mainResultSet.getString(1);
               int x=mainResultSet.getInt(2); 
               int y=mainResultSet.getInt(3); 
               g.setColor(Color.yellow);
               g.drawLine(xxx, yyy, x, y);
           }
           String query2temp="SELECT t.people_ID, t.shape.sdo_point.x, t.shape.sdo_point.y FROM people t  WHERE SDO_within_distance(t.shape, mdsys.sdo_geometry(2001,NULL, mdsys.sdo_point_type("+xxx+","+yyy+",NULL),NULL,NULL),'distance="+rad2+"')='TRUE'"; 
           querynum++;
           String query2="Query "+querynum+":"+query2temp+"\n";
           queryString+=query2;
           jTextArea1.setText(queryString);
           
           mainResultSet= mainStatement.executeQuery(query2temp);
           
           while(mainResultSet.next())
           {   
               Boolean flag=true; 
               String temp=mainResultSet.getString(1);
               id2[number2++]=mainResultSet.getString(1);
               int x1=mainResultSet.getInt(2); 
               int y1=mainResultSet.getInt(3); 
              for(int i=0; i<number;i++)
              {
                  if(temp.equals(id[i]))
                      flag=false;
              }
              if(flag){    
               g.setColor(Color.BLUE);
               g.drawLine(xxx, yyy, x1, y1);
              }
           }
           
           String query3temp="SELECT t.people_ID, t.shape.sdo_point.x, t.shape.sdo_point.y FROM people t  WHERE SDO_within_distance(t.shape, mdsys.sdo_geometry(2001,NULL, mdsys.sdo_point_type("+xxx+","+yyy+",NULL),NULL,NULL),'distance="+rad3+"')='TRUE'"; 
           mainResultSet= mainStatement.executeQuery(query3temp);
           querynum++;
           String query3="Query "+querynum+":"+query3temp+"\n";
           queryString+=query3;
           jTextArea1.setText(queryString);
             
           while(mainResultSet.next())
           {   
               Boolean flag=true; 
               String temp=mainResultSet.getString(1);
               int x1=mainResultSet.getInt(2); 
               int y1=mainResultSet.getInt(3); 
              for(int i=0; i<number2;i++)
              {
                  if(temp.equals(id2[i]))
                      flag=false;
              }
              if(flag){    
               g.setColor(Color.CYAN);
               g.drawLine(xxx, yyy, x1, y1);
              }
           }
           
          }
          catch(Exception e)
          {
          System.out.println(  e.toString() );
          }
       
         
     }
     
    }//GEN-LAST:event_jButton1MouseClicked
   int []xCord=new int[100]; 
   int []yCord=new int[100]; 
   int xxx; 
   int yyy; 
   int rad;
   int counter=0; 
   
    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:
        Graphics g=jLabel1.getGraphics();
        g.setColor(Color.red);
        if(jRadioButton2.isSelected())
        {           
           if(evt.isMetaDown())
        {
            g.drawLine(xCord[counter-1],yCord[counter-1], xCord[0],yCord[0]);
        }
           else
           {
        int x=evt.getX();xCord[counter]=x;
        int y=evt.getY();yCord[counter]=y;
        counter++; 
        if(counter>=2)
        {
        g.drawLine(xCord[counter-2], yCord[counter-2],xCord[counter-1], yCord[counter-1] );
        }
        g.drawRect(x, y, 1, 1);
           }
     
        }
        else if(jRadioButton3.isSelected())
        {
          int x=evt.getX();
          int y=evt.getY();
          g.fillRect(x, y, 5, 5);
          g.drawOval(x-70, y-70, 2*70, 2*70);
          xxx=x;
          yyy=y;
          
        }
        else if(jRadioButton4.isSelected())
        {
          int x=evt.getX();
          int y=evt.getY();  
          String s1=String.valueOf(x);
          String s2=String.valueOf(y);     
          String result=s1+","+s2;
 
          
          String querytemp="SELECT t.ap_ID, t.shape.sdo_point.x, t.shape.sdo_point.y, t.ap_radius FROM ap t  WHERE SDO_NN(t.shape, mdsys.sdo_geometry(2001,NULL, mdsys.sdo_point_type("+result+",NULL),NULL,NULL),'sdo_num_res=1') = 'TRUE'";
          querynum++;
          String query="Query "+querynum+":"+querytemp+"\n";
           queryString+=query;
           jTextArea1.setText(queryString);
           
          try{
               mainResultSet= mainStatement.executeQuery(querytemp);
     //      mainResultSet= mainStatement.executeQuery("SELECT t.ap_ID, t.shape.sdo_point.x, t.shape.sdo_point.y FROM ap t WHERE SDO_RELATE(t.shape, mdsys.sdo_geometry(2003,NULL,NULL, mdsys.sdo_elem_info_array(1,1003,1),mdsys.sdo_ordinate_array("+result+")),'mask=INSIDE querytype=WINDOW') = 'TRUE' Union ALL SELECT b.ap_ID, b.shape.sdo_point.x, b.shape.sdo_point.y FROM ap b WHERE SDO_RELATE(b.shape, mdsys.sdo_geometry(2003,NULL,NULL, mdsys.sdo_elem_info_array(1,1003,1),mdsys.sdo_ordinate_array("+result+")),'mask=ANYINTERACT querytype=WINDOW') = 'TRUE'");
           while(mainResultSet.next())
           {      
               int xr=mainResultSet.getInt(2); 
               int yr=mainResultSet.getInt(3); 
                g.setColor(Color.BLUE);
               g.fillRect(xr-7, yr-7, 15, 15); 
               rad=mainResultSet.getInt(4);
               xxx=xr; 
               yyy=yr;
           }
          }
          catch(Exception e)
          {
          System.out.println(  e.toString() );
          }
          }
 
        
    }//GEN-LAST:event_jLabel1MouseClicked

    private void jRadioButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jRadioButton4MouseClicked
        // TODO add your handling code here:

         Graphics g=jLabel1.getGraphics();
          
         g.setColor(Color.YELLOW);

           try
           {
           String query="select b.building_ID, b.shape.sdo_ordinates from building b";
           
           querynum++;
           query="Query "+querynum+":"+query+"\n";
           queryString+=query;
           jTextArea1.setText(queryString);
           
           mainResultSet= mainStatement.executeQuery("select b.building_ID, b.shape.sdo_ordinates from building b");
           while(mainResultSet.next())
           {
               oracle.sql.ARRAY point=(oracle.sql.ARRAY)mainResultSet.getObject(2);
               ResultSet result=point.getResultSet();
               int []cord=new int[100];
               int num=0;
               while(result.next())
               {
                  cord[num]= result.getInt(2);
                  num++;           
               }
               for(int i=0; i<num-1; i+=2)
               {
                   if(i<=num-4)
                   {
                   g.drawLine(cord[i], cord[i+1], cord[i+2], cord[i+3]);
                   }
                   if(i==num-2)
                   {
                   g.drawLine(cord[i], cord[i+1], cord[0], cord[1]);   
                   }
               }
           }
           }
           catch(Exception e)
           {
             System.out.println(  e.toString() );
           }
       
            g.setColor(Color.GREEN);
           try
           {
           String query="select p.people_id,p.shape.sdo_point.x, p.shape.sdo_point.y from people p";
           querynum++;
           query="Query "+querynum+":"+query+"\n";
           queryString+=query;
           jTextArea1.setText(queryString);
           
           mainResultSet= mainStatement.executeQuery("select p.people_id,p.shape.sdo_point.x, p.shape.sdo_point.y from people p");
           while(mainResultSet.next())
           {
               int x=mainResultSet.getInt(2); 
               int y=mainResultSet.getInt(3); 
               g.fillRect(x, y, 10, 10); 

           }
           }
           catch(Exception e)
           {
             System.out.println(  e.toString() );
           }
    
     
           g.setColor(Color.red);
            try
           {
           String query="select p.ap_id,p.ap_radius, p.shape.sdo_point.x, p.shape.sdo_point.y from ap p";
           
           querynum++;
           query="Query "+querynum+":"+query+"\n";
           queryString+=query;
           jTextArea1.setText(queryString);
           
           mainResultSet= mainStatement.executeQuery("select p.ap_id,p.ap_radius, p.shape.sdo_point.x, p.shape.sdo_point.y from ap p");
           while(mainResultSet.next())
           {
               int rad=mainResultSet.getInt(2);   
               int x=mainResultSet.getInt(3); 
               int y=mainResultSet.getInt(4); 
               g.fillRect(x-7, y-7, 15, 15); 
               g.drawOval(x-rad, y-rad, 2*rad, 2*rad);

           }
           }
           catch(Exception e)
           {
             System.out.println(  e.toString() );
           }
           
    }//GEN-LAST:event_jRadioButton4MouseClicked

    private void jRadioButton2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jRadioButton2StateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton2StateChanged

    private void jRadioButton2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButton2ItemStateChanged
        // TODO add your handling code here:
       /* if(evt.getStateChange()!=ItemEvent.SELECTED)
        {
            Graphics g=jLabel1.getGraphics();
            g.clearRect(0, 0, 820, 580);          
            jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("map.jpg")));
        }
        */
    }//GEN-LAST:event_jRadioButton2ItemStateChanged

    private void jRadioButton3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButton3ItemStateChanged

    }//GEN-LAST:event_jRadioButton3ItemStateChanged

    private void jRadioButton1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jRadioButton1StateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton1StateChanged

    private void jRadioButton1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButton1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButton1ItemStateChanged

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        jTextArea1.setText("");
		queryString="";
		querynum=0;
    }//GEN-LAST:event_jButton2MouseClicked

    private void jRadioButton4ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButton4ItemStateChanged

    }//GEN-LAST:event_jRadioButton4ItemStateChanged

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // TODO add your handling code here:
        
        jPanel1.repaint();
        jCheckBox1.setSelected(false);
        jCheckBox2.setSelected(false);
        jCheckBox3.setSelected(false);
        jRadioButton1.setSelected(false);
        jRadioButton2.setSelected(false);
        jRadioButton3.setSelected(false);
        jRadioButton4.setSelected(false);
        
        
    }//GEN-LAST:event_jButton3MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(hw2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(hw2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(hw2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(hw2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new hw2().setVisible(true);
            }
        });
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
